{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e0e09c67",
   "metadata": {
    "_cell_guid": "4b0b030f-9e60-443a-a897-24acfced08d9",
    "_uuid": "9edf1f7b-6ae4-4f68-85de-74bc6279bbc9",
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.004958,
     "end_time": "2025-07-30T16:34:52.753176",
     "exception": false,
     "start_time": "2025-07-30T16:34:52.748218",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<div style=\"background-color: #333; padding: 40px; border: 2px solid #ffd700; border-radius: 10px; color: #ffd700; text-align: center; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\">\n",
    "\n",
    "<h1 style=\"font-size: 48px; font-weight: bold; color: #ffd700;\">LLM Classification finetuning DeBERTA</h1>\n",
    "\n",
    "<img src=\"https://cdn.arstechnica.net/wp-content/uploads/2023/12/GettyImages-152404829-scaled.jpg\" alt=\"Chatbot arena\" style=\"width: 500px; margin: 20px auto; border-radius: 10px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\">\n",
    "    \n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2e7b382d",
   "metadata": {
    "papermill": {
     "duration": 0.003815,
     "end_time": "2025-07-30T16:34:52.761655",
     "exception": false,
     "start_time": "2025-07-30T16:34:52.757840",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## <div style=\"border-radius: 10px; border: 2px solid #ffd700; padding: 15px; background-color: #333; font-size: 120%; text-align: center; color: #ffd700; font-weight: bold;\">Table of content</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a211673d",
   "metadata": {
    "papermill": {
     "duration": 0.003491,
     "end_time": "2025-07-30T16:34:52.769023",
     "exception": false,
     "start_time": "2025-07-30T16:34:52.765532",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<ul class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n",
    "    <li><a href=\"#0.-Introduction\">0. Introduction</a></li><br>\n",
    "    <li><a href=\"#1.-Import-Libraries\">1. Import Libraries</a></li><br>\n",
    "    <li><a href=\"#2.-Data-Loading-&-Inspection\">2. Data Loading & Inspection</a></li><br>\n",
    "    <li><a href=\"#3.-Text-Preprocessing\">3. Text Preprocessing</a></li><br>\n",
    "    <li><a href=\"#4.-Dataset-Preparation\">4. Dataset Preparation</a></li><br>\n",
    "    <li><a href=\"#5.-Model-Building\">5. Model Building</a></li><br>\n",
    "    <li><a href=\"#6.-Training-&-Evaluation\">6. Training & Evaluation</a></li><br>\n",
    "    <li><a href=\"#7.-Prediction-&-Submission\">7. Prediction & Submission</a></li><br>\n",
    "</ul>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "926bd731",
   "metadata": {
    "papermill": {
     "duration": 0.00352,
     "end_time": "2025-07-30T16:34:52.776325",
     "exception": false,
     "start_time": "2025-07-30T16:34:52.772805",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## <div style=\"border-radius: 10px; border: 2px solid #ffd700; padding: 15px; background-color: #333; font-size: 120%; text-align: center; color: #ffd700; font-weight: bold;\">0. Introduction</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "248d4c9d",
   "metadata": {
    "papermill": {
     "duration": 0.0036,
     "end_time": "2025-07-30T16:34:52.783820",
     "exception": false,
     "start_time": "2025-07-30T16:34:52.780220",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Intro : \n",
    "\n",
    "In the rapidly evolving world of large language models (LLMs), one of the most critical challenges is ensuring that AI-generated responses align with human preferences. While modern chatbots can produce fluent and coherent text, not all responses are equally engaging, helpful, or satisfying to users. This Kaggle competition tackles this challenge head-on by leveraging real-world data from Chatbot Arena, where users compare responses from different LLMs and choose their preferred one.\n",
    "\n",
    "### Competition Overview :\n",
    "\n",
    "The goal is to predict which LLM response a human judge will prefer in a head-to-head battle. Each conversation consists of:\n",
    "\n",
    "A user prompt (the input given to the chatbots).\n",
    "\n",
    "Two LLM-generated responses (anonymous models competing against each other).\n",
    "\n",
    "A human preference label (indicating which response was preferred).\n",
    "\n",
    "This task mirrors Reinforcement Learning from Human Feedback (RLHF), a key technique for aligning AI with human values. Successfully predicting preferences helps improve reward models, which are essential for training better chatbots.\n",
    "\n",
    "### Key challenges :\n",
    "\n",
    "1. Biases in Human Judgments\n",
    "\n",
    "    * Position bias: Users may favor the first or second response due to ordering.\n",
    "\n",
    "    * Verbosity bias: Longer responses might be preferred even if less accurate.\n",
    "\n",
    "    * Self-enhancement bias: Models may subtly promote themselves.\n",
    "\n",
    "2. Model Generalization\n",
    "\n",
    "    * The test set (~25K samples) requires robust predictions beyond the training data (55K samples).\n",
    "\n",
    "3. Interpretable Preference Modeling\n",
    "\n",
    "    * Understanding why users prefer certain responses can guide better LLM fine-tuning.\n",
    "  \n",
    "### Why this matters :\n",
    "\n",
    "Improving preference prediction models directly enhances:\n",
    "\n",
    "* Chatbot training.\n",
    "\n",
    "* User satisfaction (by aligning AI with human expectations).\n",
    "\n",
    "* Fairness & robustness (reducing biases in AI judgments).\n",
    "\n",
    "By competing in this challenge, we contribute to the future of human-aligned AI assistants—making them not just smarter, but also more attuned to what users truly want."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a4783e99",
   "metadata": {
    "papermill": {
     "duration": 0.003472,
     "end_time": "2025-07-30T16:34:52.791206",
     "exception": false,
     "start_time": "2025-07-30T16:34:52.787734",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## <div style=\"border-radius: 10px; border: 2px solid #ffd700; padding: 15px; background-color: #333; font-size: 120%; text-align: center; color: #ffd700; font-weight: bold;\">1. Import Libraries</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a55d64f4",
   "metadata": {
    "_cell_guid": "6c7b61b9-fe93-4fc1-8efe-d26c8395c114",
    "_uuid": "7199a26c-e7fc-4b97-a67c-4a5651f4e968",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-07-30T16:34:52.799670Z",
     "iopub.status.busy": "2025-07-30T16:34:52.799389Z",
     "iopub.status.idle": "2025-07-30T16:35:10.803332Z",
     "shell.execute_reply": "2025-07-30T16:35:10.802374Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 18.010075,
     "end_time": "2025-07-30T16:35:10.804882",
     "exception": false,
     "start_time": "2025-07-30T16:34:52.794807",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-07-30 16:34:54.528454: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1753893294.739411      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1753893294.795930      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Num GPUs Available:  1\n",
      "/device:GPU:0\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1753893310.798472      19 gpu_device.cc:2022] Created device /device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n"
     ]
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "print(\"Num GPUs Available: \", len(tf.config.list_physical_devices('GPU')))\n",
    "print(tf.test.gpu_device_name())\n",
    "\n",
    "# Configure GPU memory growth (prevents OOM errors)\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ec72ac92",
   "metadata": {
    "_cell_guid": "844f9497-0a09-4b60-98f8-1a35ecee3060",
    "_uuid": "1938c30a-099a-4e49-b648-48dfad50fd33",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-07-30T16:35:10.815666Z",
     "iopub.status.busy": "2025-07-30T16:35:10.815156Z",
     "iopub.status.idle": "2025-07-30T16:35:12.245747Z",
     "shell.execute_reply": "2025-07-30T16:35:12.244897Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 1.4371,
     "end_time": "2025-07-30T16:35:12.247322",
     "exception": false,
     "start_time": "2025-07-30T16:35:10.810222",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import re\n",
    "import matplotlib.pyplot as plt\n",
    "import tensorflow as tf\n",
    "import keras_nlp\n",
    "from sklearn.model_selection import train_test_split\n",
    "from keras import backend as K\n",
    "\n",
    "# Configuration\n",
    "MODEL_NAME = \"deberta_v3_extra_small_en\"\n",
    "SEQUENCE_LENGTH = 128\n",
    "BATCH_SIZE = 16\n",
    "EPOCHS = 5\n",
    "LEARNING_RATE = 5e-6"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b0f62351",
   "metadata": {
    "_cell_guid": "9a05b397-6264-4051-b3c2-9c45c8a5c39d",
    "_uuid": "69d59df5-2187-4cbb-b1ec-54a65db6d634",
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.004201,
     "end_time": "2025-07-30T16:35:12.257465",
     "exception": false,
     "start_time": "2025-07-30T16:35:12.253264",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## <div style=\"border-radius: 10px; border: 2px solid #ffd700; padding: 15px; background-color: #333; font-size: 120%; text-align: center; color: #ffd700; font-weight: bold;\">2. Data Loading & Inspection</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2dc57f44",
   "metadata": {
    "_cell_guid": "02ed24a1-0d59-4e38-a0b5-d4f102a2303e",
    "_uuid": "325e37b2-91e5-45f5-97de-7b0bac32b5b3",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-07-30T16:35:12.268123Z",
     "iopub.status.busy": "2025-07-30T16:35:12.267329Z",
     "iopub.status.idle": "2025-07-30T16:35:15.805468Z",
     "shell.execute_reply": "2025-07-30T16:35:15.804554Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 3.545148,
     "end_time": "2025-07-30T16:35:15.806862",
     "exception": false,
     "start_time": "2025-07-30T16:35:12.261714",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train shape: (57477, 9)\n",
      "Test shape: (3, 4)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>model_a</th>\n",
       "      <th>model_b</th>\n",
       "      <th>prompt</th>\n",
       "      <th>response_a</th>\n",
       "      <th>response_b</th>\n",
       "      <th>winner_model_a</th>\n",
       "      <th>winner_model_b</th>\n",
       "      <th>winner_tie</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>30192</td>\n",
       "      <td>gpt-4-1106-preview</td>\n",
       "      <td>gpt-4-0613</td>\n",
       "      <td>[\"Is it morally right to try to have a certain...</td>\n",
       "      <td>[\"The question of whether it is morally right ...</td>\n",
       "      <td>[\"As an AI, I don't have personal beliefs or o...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>53567</td>\n",
       "      <td>koala-13b</td>\n",
       "      <td>gpt-4-0613</td>\n",
       "      <td>[\"What is the difference between marriage lice...</td>\n",
       "      <td>[\"A marriage license is a legal document that ...</td>\n",
       "      <td>[\"A marriage license and a marriage certificat...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>65089</td>\n",
       "      <td>gpt-3.5-turbo-0613</td>\n",
       "      <td>mistral-medium</td>\n",
       "      <td>[\"explain function calling. how would you call...</td>\n",
       "      <td>[\"Function calling is the process of invoking ...</td>\n",
       "      <td>[\"Function calling is the process of invoking ...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>96401</td>\n",
       "      <td>llama-2-13b-chat</td>\n",
       "      <td>mistral-7b-instruct</td>\n",
       "      <td>[\"How can I create a test set for a very rare ...</td>\n",
       "      <td>[\"Creating a test set for a very rare category...</td>\n",
       "      <td>[\"When building a classifier for a very rare c...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>198779</td>\n",
       "      <td>koala-13b</td>\n",
       "      <td>gpt-3.5-turbo-0314</td>\n",
       "      <td>[\"What is the best way to travel from Tel-Aviv...</td>\n",
       "      <td>[\"The best way to travel from Tel Aviv to Jeru...</td>\n",
       "      <td>[\"The best way to travel from Tel-Aviv to Jeru...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       id             model_a              model_b  \\\n",
       "0   30192  gpt-4-1106-preview           gpt-4-0613   \n",
       "1   53567           koala-13b           gpt-4-0613   \n",
       "2   65089  gpt-3.5-turbo-0613       mistral-medium   \n",
       "3   96401    llama-2-13b-chat  mistral-7b-instruct   \n",
       "4  198779           koala-13b   gpt-3.5-turbo-0314   \n",
       "\n",
       "                                              prompt  \\\n",
       "0  [\"Is it morally right to try to have a certain...   \n",
       "1  [\"What is the difference between marriage lice...   \n",
       "2  [\"explain function calling. how would you call...   \n",
       "3  [\"How can I create a test set for a very rare ...   \n",
       "4  [\"What is the best way to travel from Tel-Aviv...   \n",
       "\n",
       "                                          response_a  \\\n",
       "0  [\"The question of whether it is morally right ...   \n",
       "1  [\"A marriage license is a legal document that ...   \n",
       "2  [\"Function calling is the process of invoking ...   \n",
       "3  [\"Creating a test set for a very rare category...   \n",
       "4  [\"The best way to travel from Tel Aviv to Jeru...   \n",
       "\n",
       "                                          response_b  winner_model_a  \\\n",
       "0  [\"As an AI, I don't have personal beliefs or o...               1   \n",
       "1  [\"A marriage license and a marriage certificat...               0   \n",
       "2  [\"Function calling is the process of invoking ...               0   \n",
       "3  [\"When building a classifier for a very rare c...               1   \n",
       "4  [\"The best way to travel from Tel-Aviv to Jeru...               0   \n",
       "\n",
       "   winner_model_b  winner_tie  \n",
       "0               0           0  \n",
       "1               1           0  \n",
       "2               0           1  \n",
       "3               0           0  \n",
       "4               1           0  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load datasets\n",
    "train_df = pd.read_csv(\"/kaggle/input/llm-classification-finetuning/train.csv\")\n",
    "test_df = pd.read_csv(\"/kaggle/input/llm-classification-finetuning/test.csv\")\n",
    "\n",
    "# Quick inspection\n",
    "print(\"Train shape:\", train_df.shape)\n",
    "print(\"Test shape:\", test_df.shape)\n",
    "train_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "342e29b8",
   "metadata": {
    "_cell_guid": "5491495a-3047-435b-b7d6-e6897c06b812",
    "_uuid": "441b6550-2266-4ee3-b933-78ef09395c52",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-07-30T16:35:15.817981Z",
     "iopub.status.busy": "2025-07-30T16:35:15.817717Z",
     "iopub.status.idle": "2025-07-30T16:35:16.312643Z",
     "shell.execute_reply": "2025-07-30T16:35:16.311643Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.502252,
     "end_time": "2025-07-30T16:35:16.314184",
     "exception": false,
     "start_time": "2025-07-30T16:35:15.811932",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Train Data Summary:\n",
      "- Missing values: 0\n",
      "- Duplicates: 0\n",
      "- Target distribution:\n",
      "winner_model_a    0.349079\n",
      "winner_model_b    0.341911\n",
      "winner_tie        0.309011\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Basic validation checks\n",
    "def check_data(df, name):\n",
    "    print(f\"\\n{name} Data Summary:\")\n",
    "    print(\"- Missing values:\", df.isna().sum().sum())\n",
    "    print(\"- Duplicates:\", df.duplicated().sum())\n",
    "    print(\"- Target distribution:\")\n",
    "    print(df[['winner_model_a', 'winner_model_b', 'winner_tie']].mean())\n",
    "\n",
    "\n",
    "check_data(train_df, \"Train\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b12ff2b5",
   "metadata": {
    "_cell_guid": "d9d49b91-e474-4f17-9a2a-508c46a58572",
    "_uuid": "83eb2d5c-d0e9-4e2e-bc5c-6201060145b2",
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.004523,
     "end_time": "2025-07-30T16:35:16.323876",
     "exception": false,
     "start_time": "2025-07-30T16:35:16.319353",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## <div style=\"border-radius: 10px; border: 2px solid #ffd700; padding: 15px; background-color: #333; font-size: 120%; text-align: center; color: #ffd700; font-weight: bold;\">3. Text Preprocessing</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "92c1ae45",
   "metadata": {
    "_cell_guid": "6f1f4d47-f597-4913-aabb-c8daf692991a",
    "_uuid": "4bbe4d59-0d72-47ca-ad81-a69d97d506c0",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-07-30T16:35:16.334393Z",
     "iopub.status.busy": "2025-07-30T16:35:16.334081Z",
     "iopub.status.idle": "2025-07-30T16:35:17.842916Z",
     "shell.execute_reply": "2025-07-30T16:35:17.842101Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 1.515761,
     "end_time": "2025-07-30T16:35:17.844551",
     "exception": false,
     "start_time": "2025-07-30T16:35:16.328790",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1753893317.411958      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n"
     ]
    }
   ],
   "source": [
    "class TextPreprocessor:\n",
    "    def __init__(self):\n",
    "        self.tokenizer = keras_nlp.models.DebertaV3Tokenizer.from_preset(MODEL_NAME)\n",
    "        \n",
    "    def clean_text(self, text):\n",
    "        \"\"\"Normalize text for DeBERTa\"\"\"\n",
    "        text = str(text)\n",
    "        text = re.sub(r\"\\s+\", \" \", text)  # Collapse whitespace\n",
    "        text = re.sub(r\"[^\\x00-\\x7F]+\", \" \", text)  # Remove non-ASCII\n",
    "        return text.strip()\n",
    "    \n",
    "    def create_input_pairs(self, row):\n",
    "        \"\"\"Format prompt-response pairs\"\"\"\n",
    "        clean_prompt = self.clean_text(row['prompt'])\n",
    "        return [\n",
    "            f\"Prompt: {clean_prompt} {self.tokenizer.sep_token} Response: {self.clean_text(row['response_a'])}\",\n",
    "            f\"Prompt: {clean_prompt} {self.tokenizer.sep_token} Response: {self.clean_text(row['response_b'])}\"\n",
    "        ]\n",
    "\n",
    "# Initialize processor\n",
    "processor = TextPreprocessor()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "3e98c1b9",
   "metadata": {
    "_cell_guid": "12035fbd-930d-414d-9477-0f77565f0c1f",
    "_uuid": "315fad2f-0713-448d-8755-5c54b729c480",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-07-30T16:35:17.855623Z",
     "iopub.status.busy": "2025-07-30T16:35:17.854939Z",
     "iopub.status.idle": "2025-07-30T16:35:30.750929Z",
     "shell.execute_reply": "2025-07-30T16:35:30.750026Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 12.902561,
     "end_time": "2025-07-30T16:35:30.752357",
     "exception": false,
     "start_time": "2025-07-30T16:35:17.849796",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>inputs</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>[Prompt: [\"Is it morally right to try to have ...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>[Prompt: [\"What is the difference between marr...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>[Prompt: [\"explain function calling. how would...</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>[Prompt: [\"How can I create a test set for a v...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>[Prompt: [\"What is the best way to travel from...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              inputs  label\n",
       "0  [Prompt: [\"Is it morally right to try to have ...      0\n",
       "1  [Prompt: [\"What is the difference between marr...      1\n",
       "2  [Prompt: [\"explain function calling. how would...      2\n",
       "3  [Prompt: [\"How can I create a test set for a v...      0\n",
       "4  [Prompt: [\"What is the best way to travel from...      1"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Apply preprocessing\n",
    "train_df['inputs'] = train_df.apply(processor.create_input_pairs, axis=1)\n",
    "test_df['inputs'] = test_df.apply(processor.create_input_pairs, axis=1)\n",
    "\n",
    "# Create labels (0: model_a wins, 1: model_b wins, 2: tie)\n",
    "train_df['label'] = train_df[['winner_model_a', 'winner_model_b', 'winner_tie']].idxmax(axis=1)\n",
    "train_df['label'] = train_df['label'].map({'winner_model_a':0, 'winner_model_b':1, 'winner_tie':2})\n",
    "\n",
    "# Preview processed data\n",
    "train_df[['inputs', 'label']].head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "168186fc",
   "metadata": {
    "_cell_guid": "f8223c6e-df93-4510-9d49-1606a4608308",
    "_uuid": "a471f145-fb75-4876-bc4e-2e8826aaa716",
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.004398,
     "end_time": "2025-07-30T16:35:30.761831",
     "exception": false,
     "start_time": "2025-07-30T16:35:30.757433",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## <div style=\"border-radius: 10px; border: 2px solid #ffd700; padding: 15px; background-color: #333; font-size: 120%; text-align: center; color: #ffd700; font-weight: bold;\">4. Dataset Preparation</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6113c28f",
   "metadata": {
    "_cell_guid": "1fbdaebb-6734-4ab4-ba1b-8b93c9f4b92e",
    "_uuid": "d1185666-1b9b-40c9-9fcb-22937d6ad549",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-07-30T16:35:30.772001Z",
     "iopub.status.busy": "2025-07-30T16:35:30.771742Z",
     "iopub.status.idle": "2025-07-30T16:35:40.137367Z",
     "shell.execute_reply": "2025-07-30T16:35:40.136517Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 9.372557,
     "end_time": "2025-07-30T16:35:40.138916",
     "exception": false,
     "start_time": "2025-07-30T16:35:30.766359",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Train/validation split\n",
    "train_df, valid_df = train_test_split(\n",
    "    train_df, \n",
    "    test_size=0.1, \n",
    "    stratify=train_df['label'],\n",
    "    random_state=42\n",
    ")\n",
    "\n",
    "# Create TensorFlow datasets with proper input pair handling\n",
    "def create_dataset(text_pairs, labels=None, preprocessor=None):\n",
    "    \"\"\"Convert to optimized TF Dataset with proper input pair handling\"\"\"\n",
    "    AUTO = tf.data.AUTOTUNE\n",
    "    \n",
    "    # Convert to TensorFlow Dataset\n",
    "    if labels is not None:\n",
    "        ds = tf.data.Dataset.from_tensor_slices((text_pairs, labels))\n",
    "        ds = ds.shuffle(1000)\n",
    "    else:\n",
    "        ds = tf.data.Dataset.from_tensor_slices(text_pairs)\n",
    "    \n",
    "    # Preprocessing function\n",
    "    def preprocess_pair(text_pair, label=None):\n",
    "        \"\"\"Convert raw text pairs to model-ready format\"\"\"\n",
    "        # Tokenize each response separately\n",
    "        processed_a = preprocessor(text_pair[0])  # {'token_ids': ..., 'padding_mask': ...}\n",
    "        processed_b = preprocessor(text_pair[1])\n",
    "        \n",
    "        # Stack to create (2, seq_len) tensors\n",
    "        model_inputs = {\n",
    "            \"token_ids\": tf.stack([processed_a[\"token_ids\"], processed_b[\"token_ids\"]], axis=0),\n",
    "            \"padding_mask\": tf.stack([processed_a[\"padding_mask\"], processed_b[\"padding_mask\"]], axis=0)\n",
    "        }\n",
    "        return (model_inputs, label) if label is not None else model_inputs\n",
    "    \n",
    "    # Apply preprocessing and batching\n",
    "    ds = ds.map(preprocess_pair, num_parallel_calls=AUTO)\n",
    "    ds = ds.batch(BATCH_SIZE).prefetch(AUTO)\n",
    "    return ds\n",
    "\n",
    "# Initialize preprocessor\n",
    "preprocessor = keras_nlp.models.DebertaV3Preprocessor.from_preset(\n",
    "    MODEL_NAME,\n",
    "    sequence_length=SEQUENCE_LENGTH\n",
    ")\n",
    "\n",
    "# Prepare all datasets\n",
    "train_ds = create_dataset(\n",
    "    train_df['inputs'].tolist(), \n",
    "    tf.keras.utils.to_categorical(train_df['label']),\n",
    "    preprocessor=preprocessor\n",
    ")\n",
    "valid_ds = create_dataset(\n",
    "    valid_df['inputs'].tolist(), \n",
    "    tf.keras.utils.to_categorical(valid_df['label']),\n",
    "    preprocessor=preprocessor\n",
    ")\n",
    "test_ds = create_dataset(\n",
    "    test_df['inputs'].tolist(),\n",
    "    preprocessor=preprocessor\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "68879ba2",
   "metadata": {
    "_cell_guid": "fb69a98c-39b6-44a2-be72-49a864afe239",
    "_uuid": "a873b616-57bb-4bc1-93af-b7d5374f3954",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-07-30T16:35:40.150378Z",
     "iopub.status.busy": "2025-07-30T16:35:40.149563Z",
     "iopub.status.idle": "2025-07-30T16:35:40.591557Z",
     "shell.execute_reply": "2025-07-30T16:35:40.590549Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.448931,
     "end_time": "2025-07-30T16:35:40.593007",
     "exception": false,
     "start_time": "2025-07-30T16:35:40.144076",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Token IDs shape: (16, 2, 128)\n",
      "Mask shape: (16, 2, 128)\n",
      "Example token_ids[0,0,:5]: tf.Tensor([    1 31751   294   647   309], shape=(5,), dtype=int32)\n"
     ]
    }
   ],
   "source": [
    "# Check a batch from your dataset\n",
    "for batch in train_ds.take(1):\n",
    "    inputs, labels = batch\n",
    "    print(\"Token IDs shape:\", inputs[\"token_ids\"].shape)  # Should be (batch_size, 2, 128)\n",
    "    print(\"Mask shape:\", inputs[\"padding_mask\"].shape)\n",
    "    print(\"Example token_ids[0,0,:5]:\", inputs[\"token_ids\"][0,0,:5])  # First 5 tokens of response_a"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8aba7445",
   "metadata": {
    "_cell_guid": "05ae1193-c526-41a6-9367-b89a65a9f17f",
    "_uuid": "1e3cee59-c1b1-474f-99d3-807700365a16",
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.004302,
     "end_time": "2025-07-30T16:35:40.602288",
     "exception": false,
     "start_time": "2025-07-30T16:35:40.597986",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## <div style=\"border-radius: 10px; border: 2px solid #ffd700; padding: 15px; background-color: #333; font-size: 120%; text-align: center; color: #ffd700; font-weight: bold;\">5. Model Building</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "59c01661",
   "metadata": {
    "_cell_guid": "d4a5fff8-031a-4ea4-b30a-44df29ee5b1a",
    "_uuid": "ea870872-43fd-4e0e-bbe9-0482093b4801",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-07-30T16:35:40.612608Z",
     "iopub.status.busy": "2025-07-30T16:35:40.612310Z",
     "iopub.status.idle": "2025-07-30T16:35:47.260572Z",
     "shell.execute_reply": "2025-07-30T16:35:47.259914Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 6.655024,
     "end_time": "2025-07-30T16:35:47.262004",
     "exception": false,
     "start_time": "2025-07-30T16:35:40.606980",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def build_deberta_classifier():\n",
    "    with tf.device('/GPU:0'):\n",
    "        # Define input layers\n",
    "        token_ids = tf.keras.layers.Input(\n",
    "            shape=(2, SEQUENCE_LENGTH), \n",
    "            dtype=tf.int32,\n",
    "            name=\"token_ids\"\n",
    "        )\n",
    "        padding_mask = tf.keras.layers.Input(\n",
    "            shape=(2, SEQUENCE_LENGTH),\n",
    "            dtype=tf.int32,\n",
    "            name=\"padding_mask\"\n",
    "        )\n",
    "        \n",
    "        inputs = {\"token_ids\": token_ids, \"padding_mask\": padding_mask}\n",
    "        \n",
    "        # Initialize backbone\n",
    "        backbone = keras_nlp.models.DebertaV3Backbone.from_preset(MODEL_NAME)\n",
    "        \n",
    "        # Process both responses\n",
    "        def process_response(inputs, index):\n",
    "            return {\n",
    "                \"token_ids\": inputs[\"token_ids\"][:, index, :],\n",
    "                \"padding_mask\": inputs[\"padding_mask\"][:, index, :]\n",
    "            }\n",
    "        \n",
    "        emb_a = backbone(process_response(inputs, 0))\n",
    "        emb_b = backbone(process_response(inputs, 1))\n",
    "        \n",
    "        # Classification head\n",
    "        combined = tf.keras.layers.Concatenate()([emb_a, emb_b])\n",
    "        x = tf.keras.layers.GlobalAveragePooling1D()(combined)\n",
    "        x = tf.keras.layers.Dropout(0.5)(x)\n",
    "        outputs = tf.keras.layers.Dense(3, activation='softmax')(x)\n",
    "    \n",
    "    return tf.keras.Model(inputs=inputs, outputs=outputs)\n",
    "\n",
    "# 2. Build and compile the model\n",
    "model = build_deberta_classifier()\n",
    "\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(LEARNING_RATE, weight_decay=0.01),\n",
    "    loss=tf.keras.losses.CategoricalCrossentropy(label_smoothing=0.1),\n",
    "    metrics=[\"accuracy\", \"categorical_crossentropy\"]\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f683b85",
   "metadata": {
    "_cell_guid": "999b0f1b-79a6-41e6-a56b-4c4bca750cab",
    "_uuid": "8b4871db-3c9d-4cd6-9799-c6a54af482ed",
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.00437,
     "end_time": "2025-07-30T16:35:47.271341",
     "exception": false,
     "start_time": "2025-07-30T16:35:47.266971",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## <div style=\"border-radius: 10px; border: 2px solid #ffd700; padding: 15px; background-color: #333; font-size: 120%; text-align: center; color: #ffd700; font-weight: bold;\">6. Training & Evaluation</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "1c4fd810",
   "metadata": {
    "_cell_guid": "d7de469d-9e1d-4168-bc18-77944ce18dbd",
    "_uuid": "0e2a61a8-0cee-40eb-abd5-b1d18c50a4d9",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-07-30T16:35:47.281790Z",
     "iopub.status.busy": "2025-07-30T16:35:47.281002Z",
     "iopub.status.idle": "2025-07-30T18:06:50.468923Z",
     "shell.execute_reply": "2025-07-30T18:06:50.468038Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 5463.301297,
     "end_time": "2025-07-30T18:06:50.577010",
     "exception": false,
     "start_time": "2025-07-30T16:35:47.275713",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/5\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1753893465.223877      57 service.cc:148] XLA service 0x790508002c30 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1753893465.224552      57 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1753893477.141469      57 cuda_dnn.cc:529] Loaded cuDNN version 90300\n",
      "I0000 00:00:1753893564.401992      57 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m3234/3234\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1347s\u001b[0m 349ms/step - accuracy: 0.3616 - categorical_crossentropy: 1.1989 - loss: 1.2026 - val_accuracy: 0.4306 - val_categorical_crossentropy: 1.0719 - val_loss: 1.0784 - learning_rate: 5.0000e-06\n",
      "Epoch 2/5\n",
      "\u001b[1m3234/3234\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1027s\u001b[0m 318ms/step - accuracy: 0.3899 - categorical_crossentropy: 1.1142 - loss: 1.1207 - val_accuracy: 0.4494 - val_categorical_crossentropy: 1.0573 - val_loss: 1.0654 - learning_rate: 5.0000e-06\n",
      "Epoch 3/5\n",
      "\u001b[1m3234/3234\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1034s\u001b[0m 320ms/step - accuracy: 0.4156 - categorical_crossentropy: 1.0892 - loss: 1.0977 - val_accuracy: 0.4468 - val_categorical_crossentropy: 1.0514 - val_loss: 1.0610 - learning_rate: 5.0000e-06\n",
      "Epoch 4/5\n",
      "\u001b[1m3234/3234\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1027s\u001b[0m 317ms/step - accuracy: 0.4319 - categorical_crossentropy: 1.0709 - loss: 1.0813 - val_accuracy: 0.4461 - val_categorical_crossentropy: 1.0471 - val_loss: 1.0585 - learning_rate: 5.0000e-06\n",
      "Epoch 5/5\n",
      "\u001b[1m3234/3234\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1027s\u001b[0m 317ms/step - accuracy: 0.4387 - categorical_crossentropy: 1.0597 - loss: 1.0714 - val_accuracy: 0.4489 - val_categorical_crossentropy: 1.0460 - val_loss: 1.0577 - learning_rate: 5.0000e-06\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Callbacks\n",
    "callbacks = [\n",
    "    tf.keras.callbacks.EarlyStopping(patience=2, restore_best_weights=True),\n",
    "    tf.keras.callbacks.ModelCheckpoint(\"best_model.weights.h5\", save_best_only=True),\n",
    "    tf.keras.callbacks.ReduceLROnPlateau(factor=0.5, patience=1)\n",
    "]\n",
    "\n",
    "# Train model\n",
    "history = model.fit(\n",
    "    train_ds,\n",
    "    validation_data=valid_ds,\n",
    "    epochs=EPOCHS,\n",
    "    callbacks=callbacks\n",
    ")\n",
    "\n",
    "# Plot training history\n",
    "pd.DataFrame(history.history)[['loss', 'val_loss']].plot()\n",
    "plt.title(\"Training History\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b7962b05",
   "metadata": {
    "_cell_guid": "c6f5579f-16e1-4024-993f-6c7745c6b63b",
    "_uuid": "ea2513d6-336a-4f6f-b8e8-68c35a4ccb4b",
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.862874,
     "end_time": "2025-07-30T18:06:52.253249",
     "exception": false,
     "start_time": "2025-07-30T18:06:51.390375",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## <div style=\"border-radius: 10px; border: 2px solid #ffd700; padding: 15px; background-color: #333; font-size: 120%; text-align: center; color: #ffd700; font-weight: bold;\">7. Prediction & Submission</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c82d9c62",
   "metadata": {
    "_cell_guid": "633d44ea-5dd5-4552-a251-5d0b0008772d",
    "_uuid": "5fa5ba9e-e121-437d-83f2-f2990e924dc9",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-07-30T18:06:53.911839Z",
     "iopub.status.busy": "2025-07-30T18:06:53.910939Z",
     "iopub.status.idle": "2025-07-30T18:07:07.932669Z",
     "shell.execute_reply": "2025-07-30T18:07:07.931946Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 14.912824,
     "end_time": "2025-07-30T18:07:07.933936",
     "exception": false,
     "start_time": "2025-07-30T18:06:53.021112",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m14s\u001b[0m 14s/step\n",
      "Submission saved!\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>winner_model_a</th>\n",
       "      <th>winner_model_b</th>\n",
       "      <th>winner_tie</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>136060</td>\n",
       "      <td>0.287083</td>\n",
       "      <td>0.318797</td>\n",
       "      <td>0.394119</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>211333</td>\n",
       "      <td>0.401011</td>\n",
       "      <td>0.328618</td>\n",
       "      <td>0.270371</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1233961</td>\n",
       "      <td>0.387071</td>\n",
       "      <td>0.326522</td>\n",
       "      <td>0.286407</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        id  winner_model_a  winner_model_b  winner_tie\n",
       "0   136060        0.287083        0.318797    0.394119\n",
       "1   211333        0.401011        0.328618    0.270371\n",
       "2  1233961        0.387071        0.326522    0.286407"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Generate predictions\n",
    "test_preds = model.predict(test_ds)\n",
    "test_df['prediction'] = np.argmax(test_preds, axis=1)\n",
    "\n",
    "# Create submission\n",
    "submission = pd.DataFrame({\n",
    "            \"id\": test_df.id,\n",
    "            \"winner_model_a\": test_preds[:, 0],\n",
    "            \"winner_model_b\": test_preds[:, 1],\n",
    "            \"winner_tie\": test_preds[:, 2]\n",
    "        })\n",
    "submission.to_csv(\"submission.csv\", index=False)\n",
    "print(\"Submission saved!\")\n",
    "submission"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "databundleVersionId": 9809560,
     "sourceId": 86518,
     "sourceType": "competition"
    },
    {
     "modelId": 2820,
     "modelInstanceId": 4684,
     "sourceId": 6063,
     "sourceType": "modelInstanceVersion"
    },
    {
     "modelId": 2820,
     "modelInstanceId": 4684,
     "sourceId": 205017,
     "sourceType": "modelInstanceVersion"
    }
   ],
   "dockerImageVersionId": 31089,
   "isGpuEnabled": true,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 5543.999536,
   "end_time": "2025-07-30T18:07:12.117455",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-30T16:34:48.117919",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
